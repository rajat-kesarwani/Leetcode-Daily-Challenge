Given the root of a binary tree, return the preorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,2,3]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100
 

Follow up: Recursive solution is trivial, could you do it iteratively?




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        //  Stack<TreeNode> stack = new Stack<>();
        //  ArrayList<Integer> ans = new ArrayList<>();

        //  if(root == null) return ans;

        //  stack.add(root);
         
        //  while(!stack.empty())
        //  {
        //      root = stack.pop();

        //      ans.add(root.val);

        //      if(root.right != null)
        //      {
        //          stack.push(root.right);
        //      }

        //        if(root.left != null)
        //      {
        //          stack.push(root.left);
        //      }

        //  }
        // return ans;

       ArrayList<Integer> ans = new ArrayList<>();
       help(root,ans);
       return ans;
       
    }

// recursive approch 
    public void help(TreeNode root, List<Integer> ans )
    {
        // Base condition is if the root node is null the must be return 0 as asnswer
         if (root == null)
            return;
  
        /* then print the data of node */
        ans.add(root.val);

        /* first recur on left child */
        help(root.left,ans);
  
  
        /* now recur on right child */
        help(root.right,ans);
    }
}
